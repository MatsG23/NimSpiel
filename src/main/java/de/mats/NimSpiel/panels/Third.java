package de.mats.NimSpiel.panels;

import de.mats.NimSpiel.Window;
import de.mats.NimSpiel.game.Spielfeld;

import javax.swing.*;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import java.awt.*;
import java.util.concurrent.CompletableFuture;

public class Third {
    private JTextPane textPane1;
    private JTextField row_textField;
    private JTextField count_textField;
    private JButton button1;
    private JPanel panel;
    private JComboBox<Integer> combobox;
    private JLabel POT;
    private JLabel loading_dots;

    private int round = 0;
    private Window window;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public Third(Window window) {
        this.window = window;
    }

    private void nextRound() {
        round++;
    }

    public JLabel getPOT() {
        return POT;
    }

    public JTextPane getTextPane1() {
        return textPane1;
    }

    private void createUIComponents() {
        row_textField = new JTextField();

        textPane1 = new JTextPane();
        textPane1.setFont(new Font("monospaced", Font.PLAIN, 14));
        SimpleAttributeSet bSet = new SimpleAttributeSet();
        StyleConstants.setAlignment(bSet, StyleConstants.ALIGN_CENTER);
        textPane1.getStyledDocument().setParagraphAttributes(0, 104, bSet, false);

        combobox = new JComboBox<>(new Integer[]{1, 2, 3});

        loading_dots = new JLabel();
        CompletableFuture.runAsync(() -> {
            while (true) {
                try {
                    loading_dots.setText(".");
                    Thread.sleep(850);
                    loading_dots.setText("..");
                    Thread.sleep(850);
                    loading_dots.setText("...");
                    Thread.sleep(850);
                    loading_dots.setText("");
                    Thread.sleep(850);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        button1 = new JButton();
        button1.addActionListener(event -> {
            int row, count;

            if (row_textField.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Es trat ein Fehler auf. Überprüfe, ob du alle Textfelder ausgefüllt hast und fülle sie ggf. aus!", "Fehlerhafte Eingabe", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                String row_string = row_textField.getText();
                row = getInt(row_string);
                row_textField.setText("");
                if (row == 0)
                    return;
            }

            count = Integer.parseInt(combobox.getSelectedItem().toString());


            Spielfeld spielfeld = window.getSpielfeld();

            boolean valid = spielfeld.isValid(row, count);
            if (!valid) {
                JOptionPane.showMessageDialog(null, "Es trat ein Fehler auf. Deine Eingaben sind nicht auf das Spielfeld anwendbar. Bitte überprüfe und korrigiere deine Eingaben.", "Fehlerhafte Eingabe", JOptionPane.ERROR_MESSAGE);
                return;
            }

            spielfeld.take(row, count);
            textPane1.setText(spielfeld.render());
            if (spielfeld.isEmpty()) {
                int input = JOptionPane.showOptionDialog(null, "Das Spiel ist beendet. Sieger ist " + getPlayerOnTurn() + "! Willst du erneut spielen?", "Spiel zu Ende!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
                handleAlertOptions(input);
                return;
            }
            nextRound();
            setPlayerOnTurn();


            if (window.getBot() != null) {
                row_textField.setEnabled(false);
                combobox.setEnabled(false);

                CompletableFuture.runAsync(() -> {
                    try {
                        Thread.sleep(1500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    int[] turn = window.getBot().getTurn(spielfeld);
                    spielfeld.take(turn[0], turn[1]);
                    textPane1.setText(spielfeld.render());
                    if (spielfeld.isEmpty()) {
                        int input = JOptionPane.showOptionDialog(null, "Das Spiel ist beendet. Sieger ist " + window.getBot().getName() + "! Willst du erneut spielen?", "Spiel zu Ende!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
                        handleAlertOptions(input);
                    }

                    row_textField.setEnabled(true);
                    combobox.setEnabled(true);

                    nextRound();
                    setPlayerOnTurn();
                });

            }

        });
    }

    private void handleAlertOptions(int input) {
        if (input == JOptionPane.OK_OPTION) {
            window.setVisible(false);
            new Window();
            window.dispose();
        } else if (input == JOptionPane.NO_OPTION) {
            window.setVisible(false);
            window.dispose();
        }
    }

    public int getInt(String s) {
        try {
            return Integer.parseInt(s);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Es trat ein Fehler auf. Bitte gib ZAHLEN in die Textfelder ein.", "Fehlerhafte Eingabe", JOptionPane.ERROR_MESSAGE);
        }
        return 0;
    }

    public void setPlayerOnTurn() {
        if (round % 2 == 0) {
            POT.setText(window.getP1() + " ist am Zug");
        } else {
            POT.setText(window.getP2() + " ist am Zug");
        }
    }

    public String getPlayerOnTurn() {
        if (round % 2 == 0) {
            return window.getP1();
        } else {
            return window.getP2();
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        textPane1.setEditable(false);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.ipadx = 300;
        panel.add(textPane1, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(7, 0, 0, 0);
        panel.add(row_textField, gbc);
        button1.setIcon(new ImageIcon(getClass().getResource("/check.png")));
        button1.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(7, 0, 7, 0);
        panel.add(button1, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Reihe");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(label1, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Anzahl");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(label2, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(combobox, gbc);
        POT = new JLabel();
        POT.setText("Niemand ist am Zug!");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(POT, gbc);
        loading_dots.setText("...");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(loading_dots, gbc);
        label1.setLabelFor(row_textField);
        label2.setLabelFor(combobox);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}